<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
  <head>
    <title>Revolver Report</title>
  </head>

  <body >
<div style="width:800px">
    <h1>Revolver Report</h1>
    <h3>Nathan J. Bird</h3>
    <h3>F. Russell Tyndall Jr.</h3>
    <ol>
       <li><a href="#abstract">Abstract</a></li>
       <li><a href="#generation">Creature Language and Generation</a></li>
       <li><a href="#interpretation">CSE Machine Evaluation of Creatures</a></li>
       <li><a href="#simulation">Specification and Execution of a Simulation</a></li>
       <li><a href="#future">Plans for Future Improvements</a></li>
       <li><a href="#conclusion">Conclusion</a></li>
    </ol>
<hr>
<a name="abstract"></a>
<h2>Abstract</h2>

<p>The idea behind the rEvolver program was to provide an engine
wherein to have fun with, and learn about genetic programming, as well
as expanding our understanding of many different software construction
and programming language concepts.  In rEvolver we generate
"Creatures", which are vehicle for running DNA (a small, lambda
calculus based program).  The DNA language is generated from a grammer
like specification, and interpretted by a slightly modified CSE
machine.  The interpretter was modified to allow
delimitted continuations, which we use to allow programs to be paused for a
while.  This pausing of creature dna, allows us to interleave creature
actions and simulate things taking time in our system.</p>

<p>The major goals of this project are: to learn about genetic
programming, to learn about programming languages, their design, and
their computer generation, to create an environment where creatures
evolve to stay alive, and to have fun.</p>

    
<hr>
<a name="generation"></a>
<h2>Creature Language (DNA) and Generation</h2>

<p>Our DNA language was based upon the lambda calculus and was built
strongly in the principal of providing the bare minimum resources for
interesting code. We started with abstraction {lambda and gamma},
construction/destruction {cons, car and cdr}, boolean {or, if, and
equal},and environment functions{move, look, feed,
assexually-reproduce and energy}.  After getting all of these
operations in order, we also added arithmatic operators{binary +,
unary -, and &lt;}.  Future operators that we hope to implement
include sexual reproduction and some facility where by communication
could be achieved.  We hope that by providing a minimum set of
maximally orthoginal functions will bring the time neccessary to
generate interesting programs down.</p>

<p>Mutation of these programs occurs along two axises.  One controls
the mutation rate constants (how often we mutate, how much values
change by), and the other controls our chance of mutating when we
reproduce (this is one of the values that is mutated).  If we choose
to mutate when we reproduce, we choose a random node in the creature's
DNA and replace that subtree with a newly generated subtree.
</p>


    
<hr>
<a name="interpretation"></a>
<h2>CSE Machine Evaluation of Creatures</h2>

<p>We built a standard CSE machine style evaluator that first flattens
the standardized tree into control structures, then interprets the
control structures.  The machine also has the ability to, when
requested, build up a lambda closure that represents the continuation
of the interpreter's computation. This does not catch anything on the
lisp stack, just the stack, remaining control, and environment
references of the running CSE machine.  This lambda is scheduled to be
run at a later point, simulating time passing as the creature performs
some action.
 </p>

<p>Because we are are running random programs, there are a lot of
programs with errors (naturally).  To cope with these errors, we use
the CL signaling system to interrupt the creature's execution and
"kill" the creature.  Killing the creature consists of transfering
their remaining energy to their current node (for other creatures to
scavenge), and removing them from the map.  Once a creature has
finished "dying", it sends a message to the log and returns.  The next
scheduled task can then take place.  To handle the great die-offs that
accompany manyof the early generations of generated creatures, we set
up the simulation to repopulate the world when we get below some
fraction of the initially created creatures.  This repoluation is a
mixture new of random creatures and clones the creatures that were
alive in the world when it became neccessary to repopulate. Typically
after the program has been running steadily for a few hundred/thousand
(depending on the world constants) turns, the program never needs to
repopulate. This is a confirmation that the system is meeting our base
minimum goal, of producing programs that evolve to stay alive.
</p>
    
<hr>
<a name="simulation"></a>
<h2>Specification and Execution of a Simulation</h2>

<p>The grammar of the creatures dna is specified in one file. A
function then walks it (randomly choosing branches) to produce a
standardized tree consumable by the CSE machine.</p>

<p>In rEvolver, all of the constants about the way the world works are
specified in a singleton simulation object. This object could be
cloned or inherited from to change the simulation in a controlled
manner. </p> 

<p>A simple world map keeps track of where the creatures and energy
are.  The map presents a graph based interface to the rest of the
program, but is implemented as a 2 dimensional array for simplicity,
with edges between adjacent (by index) nodes.  A graph based
representation was chosen because this provides a very general system
for representing worlds with varying topologies.  A graph might also
(in the future), allow us to cast other problems into this framework,
and evolve creatures that are rewarded for solving the problem. </p>

<p>There are helper functions which assist in the creation of new
simulated worlds, the execution of these for some amount of time, as
well as the population or repopulation with creatures.  A running
simulation can be stopped (without destroying the simulation), saved,
and restarted again at a later time. We do this by using the
facilities of the LISP implementation we have chosen(Steel Bank Common
Lisp). </p>
    
<hr>

<a name="future"></a>
<h2>Plans for Future Improvements</h2>

<p>Add the ability to eat other creatures. Hopefully this will spur
more competition and possibly lead to what could be seen as carnivores
and herbivores.</p>

<p>Add the ability to write and read data to the environment (and
possibly other creatures).  At first this would probably just be
setting or reading a symbol on the creatures current node, but this
itself might be enough for creatures to form some kind of
communication.  The goal of this would be to allow for group (flock)
behavior to evolve. </p>

<p>Add species tracking and identification of creatures fullfilling
set goals.  Currently, while the system exposes all the neccessary
information, there is no tracking of how many different species we
have had in the world.  Because we are not storing this information
currently, we have no way to systematically observe which geneaologies
are the most successful.  Currently "eye-balling" the creatures DNA
has been sufficient for our debuggin purposes, as well as providing
sometimes humorous insite to the state of our world.  One example, of
this is what we have taken to calling "algea" which flourishes when
there is an over abundance of energy on most of the nodes of the
world.  The algea program is one that only contains a call(s) to feed.
This creature is (not)surprisingly resilient in some environments.  On
the other end of the spectrum, we have also seen creatures that are
surving very well (reproducing and running alot) that have code trees
too deep to discenrn at a glance.  Tracking the speciation would give
us a much better metric for the success of any set of creatures over
the hunt and check method we are currently using.  </p>

<p>Fiddle with the constants in the simulation to create the most
interesting creatures.  One of the most time consuming aspects of this
project has been running thousands of turns with different simulation
constants.  We have gone from inhospitable wastelands to algea-filled,
enrgy-rich worlds. Finding a best happy medium would be great</p>

<p>We would also like to try both a purer language (just the S and K
combinators and gamma/lambda) and a more powerful language.  It might
be interesting to add higher level constructs to the environment (for
example, if energy? then feed) rather than relying on random
combinations to arrive at these).  On the other hand, with a purer
core, it might be easier to evolve those constructs, due to the
decrease in complexity (hopefully maximizing orthogonality of
constucts).  Also there is something strangly aluring about having
only four constructs out which all else must be derived.  The main
draw back to this approach would probably be the immence amount of
iteration neccessary to evolve anything interesting and high level out
of only S,K, lambda and gamma (how long are most strands of DNA).
Unfortunatly, due to time constraints we have mostly just worked with
our initial language rather than playing with many differnt languages.
</p>

<hr>
<a name="conclusion"></a>
<h2>Conclusion</h2>

<p>This project has provided a great avenue for learning the ins and
outs of genetic programming.  Also after implementing a form of
continuations and using them fairly extensivly along one vector, we
feel we have gained a good grasp of their usefulness.  As stated
above, we feel that we met our initial goal of creating a system where
in programs would evolve to "stay-alive". </p> </div>
  </body>
</html>
